"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentsController = void 0;
const common_1 = require("@nestjs/common");
const payment_service_1 = require("./payment.service");
const payment_entity_1 = require("./payment.entity");
const jwtauth_guard_1 = require("../auth/jwtauth.guard");
const swagger_1 = require("@nestjs/swagger");
let PaymentsController = class PaymentsController {
    paymentsService;
    constructor(paymentsService) {
        this.paymentsService = paymentsService;
    }
    async createPayment(userId, amount, method, orderId) {
        return this.paymentsService.createPayment(userId, amount, method, orderId);
    }
    async confirmTossPayment(body) {
        const { paymentKey, orderId, amount } = body;
        console.log("üì• [Í≤∞Ï†ú ÏäπÏù∏ ÏöîÏ≤≠ Î∞õÏùå]", body);
        if (typeof paymentKey !== "string" ||
            typeof orderId !== "string" ||
            typeof amount !== "number" ||
            isNaN(amount) ||
            amount <= 0) {
            return {
                statusCode: 400,
                message: "ÌïÑÏàò ÌååÎùºÎØ∏ÌÑ∞Í∞Ä ÎàÑÎùΩÎêòÏóàÍ±∞ÎÇò ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.",
            };
        }
        try {
            const result = await this.paymentsService.confirmTossPayment({
                paymentKey,
                orderId,
                amount,
            });
            if (result.status === payment_entity_1.PaymentStatus.COMPLETED) {
                return { statusCode: 200, message: "Í≤∞Ï†ú ÏäπÏù∏ Ï≤òÎ¶¨ ÏôÑÎ£å" };
            }
            else {
                return { statusCode: 400, message: "Í≤∞Ï†ú ÏäπÏù∏ Ïã§Ìå®" };
            }
        }
        catch (error) {
            console.error("Í≤∞Ï†ú ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:", error);
            return { statusCode: 500, message: "ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù" };
        }
    }
    async confirmPayment(paymentId, status) {
        return this.paymentsService.confirmPayment(paymentId, status);
    }
    async getPaymentById(paymentId) {
        return this.paymentsService.getPaymentById(paymentId);
    }
    async getPaymentsByUser(req) {
        const userId = req.user.id;
        return this.paymentsService.getPaymentsByUser(userId);
    }
};
exports.PaymentsController = PaymentsController;
__decorate([
    (0, common_1.Post)("create"),
    (0, swagger_1.ApiOperation)({
        summary: "Í≤∞Ï†ú ÏöîÏ≤≠",
        description: "ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤∞Ï†úÎ•º ÏöîÏ≤≠Ìï©ÎãàÎã§.",
    }),
    (0, swagger_1.ApiResponse)({ status: 201, description: "Í≤∞Ï†ú ÏöîÏ≤≠ ÏÑ±Í≥µ" }),
    __param(0, (0, common_1.Body)("userId")),
    __param(1, (0, common_1.Body)("amount")),
    __param(2, (0, common_1.Body)("method")),
    __param(3, (0, common_1.Body)("orderId")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, String]),
    __metadata("design:returntype", Promise)
], PaymentsController.prototype, "createPayment", null);
__decorate([
    (0, common_1.Post)("confirm"),
    (0, swagger_1.ApiOperation)({
        summary: "Toss Í≤∞Ï†ú ÏäπÏù∏ ÏöîÏ≤≠",
        description: "Toss Í≤∞Ï†ú ÏôÑÎ£å ÌõÑ paymentKey, orderId, amountÎ°ú Í≤∞Ï†ú ÏÉÅÌÉúÎ•º ÏäπÏù∏ Ï≤òÎ¶¨Ìï©ÎãàÎã§.",
    }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Í≤∞Ï†ú ÏäπÏù∏ Ï≤òÎ¶¨ ÏôÑÎ£å" }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], PaymentsController.prototype, "confirmTossPayment", null);
__decorate([
    (0, common_1.Post)("confirm/:id"),
    (0, swagger_1.ApiOperation)({
        summary: "Í≤∞Ï†ú ÏäπÏù∏ (ÏàòÎèô)",
        description: "Í≤∞Ï†ú IDÎ°ú ÏÉÅÌÉúÎ•º ÏàòÎèôÏúºÎ°ú ÏäπÏù∏ Ï≤òÎ¶¨Ìï©ÎãàÎã§.",
    }),
    (0, swagger_1.ApiParam)({ name: "id", type: Number, description: "Í≤∞Ï†ú ID" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Í≤∞Ï†ú ÏäπÏù∏ ÏÑ±Í≥µ" }),
    __param(0, (0, common_1.Param)("id")),
    __param(1, (0, common_1.Body)("status")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, String]),
    __metadata("design:returntype", Promise)
], PaymentsController.prototype, "confirmPayment", null);
__decorate([
    (0, common_1.Get)(":id"),
    (0, swagger_1.ApiOperation)({
        summary: "Í≤∞Ï†ú Ï†ïÎ≥¥ Ï°∞Ìöå",
        description: "Í≤∞Ï†ú IDÎ°ú Í≤∞Ï†ú Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.",
    }),
    (0, swagger_1.ApiParam)({ name: "id", type: Number, description: "Í≤∞Ï†ú ID" }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "Í≤∞Ï†ú Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ" }),
    __param(0, (0, common_1.Param)("id")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], PaymentsController.prototype, "getPaymentById", null);
__decorate([
    (0, common_1.Get)("my-payments"),
    (0, common_1.UseGuards)(jwtauth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({
        summary: "ÎÇ¥ Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï°∞Ìöå",
        description: "JWT ÌÜ†ÌÅ∞ÏùÑ Í∏∞Î∞òÏúºÎ°ú ÎÇ¥Í∞Ä Ìïú Í≤∞Ï†ú ÎÇ¥Ïó≠ÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.",
    }),
    (0, swagger_1.ApiResponse)({ status: 200, description: "ÎÇ¥ Í≤∞Ï†ú ÎÇ¥Ïó≠ Ï°∞Ìöå ÏÑ±Í≥µ" }),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], PaymentsController.prototype, "getPaymentsByUser", null);
exports.PaymentsController = PaymentsController = __decorate([
    (0, swagger_1.ApiTags)("Payments"),
    (0, common_1.Controller)("payments"),
    __metadata("design:paramtypes", [payment_service_1.PaymentsService])
], PaymentsController);
//# sourceMappingURL=payment.controller.js.map